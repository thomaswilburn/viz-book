@metadata...
title:Introduction
...metadata

When I started doing interactive journalism at Congressional Quarterly in 2009, it was an exciting time. Smartphones had started to become widespread, and while apps got much of the attention, it was a sea change for the web. In rapid succession, we learned about responsive design, got amazing new powers via HTML5, and tried to figure out how touchscreen interaction would work in a world previously filled with hover styles and tooltips.

To deal with this extra complexity, newsroom developers often relied on tools and frameworks to bridge the gap between where we wanted browsers to be, and where they actually were. Almost all of us used jQuery, and many of us added D3 (for visualizations) or Underscore and Backbone (for what would become "single-page applications"). We needed these libraries, because while some browsers had switched to a rapid release schedule, others had not, and the specter of IE7 loomed over many of us. Even in the "standards-compliant" browsers, features and performance could vary widely.

Almost ten years later, however, that landscape has changed. These days, the slowest release cycle comes from Safari, which puts out major versions roughly once a year (but still manages minor releases with significant new features in between OS updates). Elsewhere, Chrome and Firefox have continued to sprint ahead, adding new technology that's often inspired by the frameworks of the past. IE was replaced by Edge, which has also moved to an evergreen update cycle. While many of us were head down and working, the web platform became enormously more capable, and consistent, than we might have thought.

On the Seattle Times' interactives team, we make it a point of pride to use frameworks sparingly. By leaning on the browser, our pages are lighter (and faster). More importantly, it's a good chance for junior team members to learn how the platform actually works, and develop skills that will transfer across libraries. After all, JavaScript fashions may come and go, but the browser is here for the foreseeable future.

In this book, you'll learn how to build powerful data visualizations in the browser, based on three principles:

* Use the web platform, not frameworks or libraries, whenever possible
* Prioritize data over codes
* Have fun, because elegant code should be more enjoyable to write!

Above all, through these short lessons, you should have a chance to level-up as an interactive developer, building the confidence to create your own stories and graphics from scratch. You'll also be in a better position to use frameworks when you need to do so, because you'll understand what's going on under the hood. Who knows? Maybe you'll even write your own. I can't wait to see what you will do!